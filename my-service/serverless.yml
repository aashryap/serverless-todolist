# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  dynamodb:
    start:
      port: 2000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline:
    port : 4500

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:


  addtodolist :
    handler : handler.addTodo
    events  :
      - http:
          path : todo
          method : post
          cors : true
  
  gettodos :
    handler : handler.getTodos
    events  : 
      - http :
            path : todos
            method : get
            cors   : true
            Authentication : none
  
  gettodobyid :
    handler : handler.getTodoById
    events  : 
      - http :
            path : todos/{id}
            method : get
            cors   : true
            request: 
            parameters: 
              paths: 
                id: true
  updatetodo :
    handler : handler.updatetodo
    events :
      - http : 
          path : todos
          method : put
          cors   : true
  
  deletetodo :
    handler : handler.deletetodo
    events :
      - http : 
          path : todos/{id}
          method : delete
          cors   : true
          request: 
            parameters: 
              paths: 
                id: true
  



resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-offline
  - serverless-dynamodb-local

